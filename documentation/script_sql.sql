//////////////////////////////////////////////////////////// SCRIPT CREATION CORIGE ////////////////////////////////////////////////////////////////////////

-- Table Employés
CREATE TABLE Employés (
   id_employe NUMBER GENERATED BY DEFAULT AS IDENTITY,
   nom_employe VARCHAR2(255) NOT NULL,
   prenom_employe VARCHAR2(255) NOT NULL,
   telephone_pro VARCHAR2(50) NOT NULL UNIQUE,
   telephone_perso VARCHAR2(50),
   login VARCHAR2(255) UNIQUE,
   mot_de_passe VARCHAR2(255) NOT NULL,
   date_d_arrivee DATE NOT NULL,
   poste_employe VARCHAR2(100) NOT NULL,
   departement_employe VARCHAR2(100) NOT NULL,
   adresse_email VARCHAR2(255) NOT NULL UNIQUE,
   adresse_physique VARCHAR2(255) NOT NULL,
   admin NUMBER(1) DEFAULT 0 NOT NULL,
   PRIMARY KEY (id_employe)
);

-- Table Fiche_de_Paie
CREATE TABLE Fiche_de_Paie (
   id_fiche NUMBER GENERATED BY DEFAULT AS IDENTITY,
   date_fiche DATE NOT NULL,
   salaire_brut NUMBER(10, 2) NOT NULL,
   salaire_net NUMBER(10, 2) NOT NULL,
   nb_heures NUMBER(5, 1) NOT NULL,
   taux_horaire NUMBER(10, 2) NOT NULL,
   lien_fiche VARCHAR2(255),
   id_employe NUMBER NOT NULL,
   PRIMARY KEY (id_fiche),
   FOREIGN KEY (id_employe) REFERENCES Employés(id_employe)
);

-- Table Connexion
CREATE TABLE Connexion (
   id_connexion NUMBER GENERATED BY DEFAULT AS IDENTITY,
   historique TIMESTAMP NOT NULL,
   adresse_ip VARCHAR2(100),
   id_employe NUMBER NOT NULL,
   PRIMARY KEY (id_connexion),
   FOREIGN KEY (id_employe) REFERENCES Employés(id_employe)
);

-- Table Action_sur_une_Fiche
CREATE TABLE Action_sur_une_Fiche (
   id_action_fiche NUMBER GENERATED BY DEFAULT AS IDENTITY,
   type_action VARCHAR2(100) NOT NULL,
   date_action TIMESTAMP,
   id_employe NUMBER NOT NULL,
   id_fiche NUMBER NOT NULL,
   PRIMARY KEY (id_action_fiche),
   FOREIGN KEY (id_employe) REFERENCES Employés(id_employe),
   FOREIGN KEY (id_fiche) REFERENCES Fiche_de_Paie(id_fiche)
);

-- Table Jours
CREATE TABLE Jours (
   id_jour NUMBER GENERATED BY DEFAULT AS IDENTITY,
   date_jour DATE NOT NULL,
   ouvrable NUMBER(1) NOT NULL,
   PRIMARY KEY (id_jour)
);

-- Table Demande_de_Congés
CREATE TABLE Demande_de_Congés (
   id_conge NUMBER GENERATED BY DEFAULT AS IDENTITY,
   date_debut DATE NOT NULL,
   date_fin DATE,
   type_conge VARCHAR2(255) NOT NULL,
   etat_demande VARCHAR2(255) NOT NULL,
   date_demande DATE NOT NULL,
   motif_demande CLOB,
   conge_dispo SMALLINT,
   id_jour NUMBER NOT NULL,
   id_employe NUMBER NOT NULL,
   PRIMARY KEY (id_conge),
   FOREIGN KEY (id_jour) REFERENCES Jours(id_jour),
   FOREIGN KEY (id_employe) REFERENCES Employés(id_employe)
);

//////////////////////////////////////////////////////////// SCRIPT CREATION SEQUENCE POUR LES ID //////////////////////////////////////////////////////////

CREATE SEQUENCE seq_id_jour
START WITH 1
INCREMENT BY 1;

//////////////////////////////////////////////////////////// SCRIPT POUR REMPLIR LES JOURS DU CALENDRIER ///////////////////////////////////////////////////

DECLARE
   v_date DATE := TO_DATE('2024-01-01', 'YYYY-MM-DD');  -- Date de départ : 1er janvier 2024
   v_end_date DATE := TO_DATE('2024-12-31', 'YYYY-MM-DD');  -- Date de fin : 31 décembre 2024
   v_day_num NUMBER;  -- Numéro du jour de la semaine (1 = lundi, 7 = dimanche)
BEGIN
   WHILE v_date <= v_end_date LOOP
      -- Récupérer le numéro du jour de la semaine : 1 = lundi, ..., 7 = dimanche
      v_day_num := TO_NUMBER(TO_CHAR(v_date, 'D')); 

      -- Insérer les dates avec les critères de non-ouvrabilité
      INSERT INTO Jours (id_jour, date_jour, ouvrable)
      VALUES (
         seq_id_jour.NEXTVAL,  -- Génère automatiquement l'ID de jour
         v_date,  -- La date actuelle
         CASE
            -- Si le jour est un samedi (7) ou un dimanche (1), marquer comme non ouvrable
            WHEN v_day_num IN (6,7) THEN 0
            -- Si le jour est un jour férié, marquer comme non ouvrable
            WHEN v_date IN (
               TO_DATE('2024-01-01', 'YYYY-MM-DD'),  -- Jour de l'An
               TO_DATE('2024-04-01', 'YYYY-MM-DD'),  -- Lundi de Pâques
               TO_DATE('2024-05-01', 'YYYY-MM-DD'),  -- Fête du Travail
               TO_DATE('2024-05-08', 'YYYY-MM-DD'),  -- Victoire 1945
               TO_DATE('2024-05-09', 'YYYY-MM-DD'),  -- Ascension
               TO_DATE('2024-05-20', 'YYYY-MM-DD'),  -- Lundi de Pentecôte
               TO_DATE('2024-07-14', 'YYYY-MM-DD'),  -- Fête Nationale
               TO_DATE('2024-08-15', 'YYYY-MM-DD'),  -- Assomption
               TO_DATE('2024-11-01', 'YYYY-MM-DD'),  -- Toussaint
               TO_DATE('2024-11-11', 'YYYY-MM-DD'),  -- Armistice 1918
               TO_DATE('2024-12-25', 'YYYY-MM-DD')   -- Noël
            ) THEN 0
            -- Sinon, considérer comme jour ouvrable
            ELSE 1
         END
      );

      -- Passer à la date suivante
      v_date := v_date + 1;
   END LOOP;
END;/
